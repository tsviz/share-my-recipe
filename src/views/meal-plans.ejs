<% /* src/views/meal-plans.ejs - Meal Planning UI (basic scaffold) */ %>
<%- include('partials/header', { title: 'My Meal Plans' }) %>
<style>
  /* Override Bootstrap's modal styles to ensure proper mouse interaction */
  .modal-dialog {
    pointer-events: auto !important;
  }
  .modal-content {
    pointer-events: auto !important;
  }
  .modal-body input,
  .modal-body select,
  .modal-body textarea,
  .modal-body button,
  .modal-body label,
  .modal-footer button {
    pointer-events: auto !important;
    cursor: pointer;
  }
  .modal-body input, 
  .modal-body select, 
  .modal-body textarea {
    cursor: text;
  }
</style>
<div class="container mt-4">
  <div class="home-container">
    <h1 class="main-title text-center mb-4">My Meal Plans</h1>
    <div class="text-end mb-3">
      <button class="btn btn-main" id="createMealPlanBtn">Create New Meal Plan</button>
      <!-- Emergency escape button for modal issues -->
      <button id="emergencyCloseBtn" class="btn btn-danger ms-2 d-none">
        Emergency Close Modal
      </button>
    </div>
    <!-- Create Meal Plan Modal -->
    <div class="modal" id="mealPlanModal" tabindex="-1" aria-labelledby="mealPlanModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <form id="mealPlanForm">
            <div class="modal-header">
              <h5 class="modal-title" id="mealPlanModalLabel">Create Meal Plan</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div id="mealPlanError" class="alert alert-danger d-none"></div>
              <div class="mb-3">
                <label for="mealPlanName" class="form-label">Name</label>
                <input type="text" class="form-control" id="mealPlanName" name="name" required>
              </div>
              <div class="mb-3">
                <label for="startDate" class="form-label">Start Date</label>
                <input type="date" class="form-control" id="startDate" name="start_date" required>
              </div>
              <div class="mb-3">
                <label for="endDate" class="form-label">End Date</label>
                <input type="date" class="form-control" id="endDate" name="end_date" required>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="submit" class="btn btn-main">Create</button>
            </div>
          </form>
        </div>
      </div>
    </div>
    <div id="mealPlansList">
      <!-- Meal plans will be loaded here by client-side JS or server-side rendering -->
    </div>
  </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
/**
 * Completely refactored modal implementation with simpler, more reliable approach
 * Avoiding Bootstrap's Modal JavaScript API entirely
 */
document.addEventListener('DOMContentLoaded', function() {
  // Cache DOM elements
  const modalElement = document.getElementById('mealPlanModal');
  const createBtn = document.getElementById('createMealPlanBtn');
  const emergencyBtn = document.getElementById('emergencyCloseBtn');
  const modalForm = document.getElementById('mealPlanForm');
  const errorBox = document.getElementById('mealPlanError');
  const cancelBtns = document.querySelectorAll('[data-bs-dismiss="modal"]');
  
  // Modal backdrop div - create once to avoid multiple backdrops
  const backdrop = document.createElement('div');
  backdrop.className = 'modal-backdrop show'; // Add show class for visibility
  backdrop.style.position = 'fixed';
  backdrop.style.top = '0';
  backdrop.style.right = '0';
  backdrop.style.bottom = '0';
  backdrop.style.left = '0';
  backdrop.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
  backdrop.style.zIndex = '1040';
  backdrop.style.pointerEvents = 'none'; // Allow clicks to pass through
  
  // Helper function: Close modal completely
  function closeModal() {
    // Hide modal and reset its properties
    modalElement.style.display = 'none';
    modalElement.setAttribute('aria-hidden', 'true');
    
    // Remove backdrop if it exists in the DOM
    if (backdrop.parentNode) {
      document.body.removeChild(backdrop);
    }
    
    // Clear any lingering modal-related styles on body
    document.body.style.overflow = '';
    document.body.style.paddingRight = '';
    document.body.classList.remove('modal-open');
    
    // Reset the form
    modalForm.reset();
    errorBox.classList.add('d-none');
    
    // Hide emergency button
    emergencyBtn.classList.add('d-none');
    
    // Reload meal plans
    loadMealPlans();
  }
  
  // Helper function: Open modal - FIXED VERSION
  function openModal() {
    // Show emergency button
    emergencyBtn.classList.remove('d-none');
    
    // Add backdrop to DOM
    if (!backdrop.parentNode) {
      document.body.appendChild(backdrop);
    }
    
    // Show and set up modal
    modalElement.style.display = 'block';
    modalElement.style.zIndex = '1050';
    modalElement.removeAttribute('aria-hidden');
    modalElement.setAttribute('aria-modal', 'true');
    modalElement.classList.add('show');
    
    // Ensure modal-dialog is visible and properly styled
    const modalDialog = modalElement.querySelector('.modal-dialog');
    if (modalDialog) {
      modalDialog.style.display = 'block';
      modalDialog.style.margin = '1.75rem auto';
      modalDialog.style.maxWidth = '500px';
      modalDialog.style.position = 'relative';
      modalDialog.style.zIndex = '1051';
      // DO NOT set pointer-events here - let them work normally
    }
    
    // Ensure modal-content is visible and interactive
    const modalContent = modalElement.querySelector('.modal-content');
    if (modalContent) {
      // Apply minimal styling to avoid interference with pointer events
      modalContent.style.backgroundColor = '#fff';
      modalContent.style.border = '1px solid rgba(0, 0, 0, 0.2)';
      modalContent.style.borderRadius = '.3rem';
      modalContent.style.boxShadow = '0 0.5rem 1rem rgba(0, 0, 0, 0.15)';
      modalContent.style.position = 'relative';
      modalContent.style.zIndex = '1052';
      modalContent.style.pointerEvents = 'auto';
      
      // Ensure all form inputs are clickable
      modalContent.querySelectorAll('input, select, textarea, button, label').forEach(elem => {
        elem.style.pointerEvents = 'auto';
        elem.style.cursor = (elem.tagName === 'BUTTON' || elem.tagName === 'LABEL') ? 'pointer' : 'text';
      });
    }
    
    // Prevent body scrolling
    document.body.style.overflow = 'hidden';
    document.body.classList.add('modal-open');
    
    // Focus on first form field for accessibility
    setTimeout(() => {
      const firstInput = modalElement.querySelector('input');
      if (firstInput) firstInput.focus();
    }, 100);
  }
  
  // Event handlers
  createBtn.addEventListener('click', openModal);
  emergencyBtn.addEventListener('click', closeModal);
  
  // Close buttons
  cancelBtns.forEach(btn => btn.addEventListener('click', closeModal));
  
  // Close ONLY when clicking directly on the modal background (outside the dialog)
  modalElement.addEventListener('click', function(e) {
    // Only close if clicking directly on the modal element itself (the outer container)
    // NOT when clicking on any of its children (dialog, content, inputs, etc)
    if (e.target === modalElement) {
      closeModal();
    }
  });
  
  // Add a special handler for form elements to ensure they are clickable
  document.querySelectorAll('#mealPlanModal input, #mealPlanModal select, #mealPlanModal textarea, #mealPlanModal button, #mealPlanModal label')
    .forEach(elem => {
      elem.style.cursor = elem.tagName === 'BUTTON' ? 'pointer' : 'text';
    });
  
  // Close on Escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && modalElement.style.display === 'block') {
      closeModal();
    }
  });
  
  // Set default dates for the meal plan form
  const startDateInput = document.getElementById('startDate');
  const endDateInput = document.getElementById('endDate');
  if (startDateInput && endDateInput) {
    // Set today's date as the default start date
    const today = new Date();
    const nextWeek = new Date(today);
    nextWeek.setDate(today.getDate() + 7);
    
    // Format dates for input fields (YYYY-MM-DD)
    startDateInput.value = today.toISOString().split('T')[0];
    endDateInput.value = nextWeek.toISOString().split('T')[0];
  }
  
  // Form submission
  modalForm.addEventListener('submit', function(e) {
    e.preventDefault();
    const form = e.target;
    const data = Object.fromEntries(new FormData(form));
    
    fetch('/api/meal-plans', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      credentials: 'same-origin',
      body: JSON.stringify(data)
    })
    .then(res => {
      if (!res.ok) throw new Error('Failed to create meal plan');
      return res.json();
    })
    .then(() => {
      closeModal(); // Close modal after successful submission
    })
    .catch(err => {
      errorBox.textContent = err.message;
      errorBox.classList.remove('d-none');
    });
  });
  
  loadMealPlans();
});

// Format date to be more user friendly
function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', { 
    weekday: 'short', 
    month: 'long', 
    day: 'numeric', 
    year: 'numeric' 
  });
}

function loadMealPlans() {
  fetch('/api/meal-plans', { credentials: 'same-origin' })
    .then(res => res.json())
    .then(plans => {
      const list = document.getElementById('mealPlansList');
      if (!plans.length) {
        list.innerHTML = '<div class="alert alert-info">No meal plans yet. Click "Create New Meal Plan" to get started!</div>';
        return;
      }
      list.innerHTML = plans.map(plan => `
        <div class="card mb-3">
          <div class="card-body d-flex justify-content-between align-items-center">
            <div>
              <h5 class="card-title mb-1">${plan.name}</h5>
              <p class="card-text mb-0">${formatDate(plan.start_date)} to ${formatDate(plan.end_date)}</p>
            </div>
            <div>
              <a href="/meal-plans/${plan.id}" class="btn btn-outline-secondary btn-sm me-2">View</a>
              <button class="btn btn-danger btn-sm" onclick="deleteMealPlan('${plan.id}')">Delete</button>
            </div>
          </div>
        </div>
      `).join('');
    })
    .catch(err => {
      console.error("Error loading meal plans:", err);
      document.getElementById('mealPlansList').innerHTML = 
        '<div class="alert alert-danger">Failed to load meal plans. Please try refreshing the page.</div>';
    });
}

function deleteMealPlan(id) {
  if (!confirm('Delete this meal plan?')) return;
  fetch(`/api/meal-plans/${id}`, {
    method: 'DELETE',
    credentials: 'same-origin'
  })
    .then(res => {
      if (!res.ok) throw new Error('Failed to delete meal plan');
      loadMealPlans();
    })
    .catch(err => alert(err.message));
}
</script>
<%- include('partials/footer') %>
