<%- include('partials/header') %>

<style>
    /* Ensure Bootstrap dropdowns appear above all content */
    .dropdown-toggle {
        z-index: 1055 !important;
    }
    
    .dropdown-menu {
        z-index: 1060 !important;
    }

    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      visibility: hidden;
    }

    .loading-overlay.active {
      visibility: visible;
    }

    .loading-animation {
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .loading-animation .spinner {
      width: 50px;
      height: 50px;
      border: 5px solid #f3f3f3;
      border-top: 5px solid #3498db;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .loading-animation p {
      margin-top: 10px;
      font-size: 1.2em;
      color: #555;
    }

    @keyframes pulse {
      0% { transform: scale(1); opacity: 1; }
      50% { transform: scale(1.2); opacity: 0.7; }
      100% { transform: scale(1); opacity: 1; }
    }
    
    .recipe-link {
      color: #4fd1c5;
      text-decoration: underline;
      transition: color 0.2s;
    }
    
    .recipe-link:hover {
      color: #38b2ac;
    }
    
    .ai-header {
      border-bottom: 1px solid rgba(79,209,197,0.3);
      padding-bottom: 0.5rem;
      margin-bottom: 1rem;
    }

    /* Voice search button styles */
    .search-container {
      position: relative;
    }
    
    .voice-search-btn {
      position: absolute;
      right: 10px;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      cursor: pointer;
      font-size: 1.2rem;
      color: #6c757d;
      transition: color 0.2s;
    }
    
    .voice-search-btn:hover {
      color: #ff8c00;
    }
    
    .voice-search-btn:focus {
      outline: none;
    }
    
    .voice-search-btn.listening {
      color: #dc3545;
      animation: pulse 1.5s infinite;
    }

    /* Timer indicator styles */
    .timer-indicator {
      position: absolute;
      right: 45px;
      top: 50%;
      transform: translateY(-50%);
      font-size: 0.9rem;
      color: #28a745;
      display: none;
    }
    
    .recipe-rating-btn {
      position: absolute;
      top: 8px;
      right: 8px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      border-radius: 50%;
      width: 35px;
      height: 35px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1rem;
      cursor: pointer;
      z-index: 5;
      transition: all 0.3s ease;
      box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
    }
    
    .recipe-rating-btn:hover {
      transform: scale(1.1);
      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.5);
    }
    
    /* Ensure Bootstrap dropdowns appear above all content */
    .dropdown-menu {
      z-index: 1060 !important;
    }
</style>

<div class="container mt-4">
  <h1><%= title %></h1>
  
  <form method="POST" action="/recipes/search" class="mb-4" id="searchForm">
    <div class="form-group search-container">
      <input type="text" class="form-control" id="about" name="about" placeholder="What are you looking for? (e.g. vegetarian pasta without tomatoes)" value="<%= locals.about || '' %>" autocomplete="off" />
      <span class="timer-indicator" id="timerIndicator">5s</span>
      <button type="button" id="voiceSearchBtn" class="voice-search-btn" title="Search by voice">
        <i class="bi bi-mic-fill"></i>
      </button>
    </div>
    
    <!-- User Preferences -->
    <div class="row mb-3">
      <div class="col-md-6">
        <div class="form-check">
          <input class="form-check-input" type="checkbox" id="openInNewTab" checked>
          <label class="form-check-label" for="openInNewTab">
            <i class="bi bi-box-arrow-up-right"></i> Open recipes in new tabs
          </label>
        </div>
      </div>
    </div>
    
    <button type="submit" class="btn btn-primary">Get Recommendations</button>
  </form>

  <% if (locals.ai_enabled && locals.aiExplanation) { %>
    <div class="alert alert-info">
      <strong>AI Assistant:</strong> <%= aiExplanation %>
    </div>
  <% } %>

  <% if (locals.ai_enabled && locals.positiveVibe) { %>
    <div class="mt-6 rounded-lg shadow-sm position-relative" style="background-color: rgba(25,32,43,0.92); border-left: 3px solid #4fd1c5; padding: 1.5rem;">
      <!-- Minimal accent line -->
      <div class="position-absolute" style="top: 0; left: 0; width: 40%; height: 1px; background: linear-gradient(90deg, #4fd1c5 0%, transparent 100%);"></div>
      
      <h2 class="d-flex align-items-center text-white mb-3 ai-header" style="font-size: 1.25rem; font-weight: 500;">
        <i class="fas fa-robot me-2" style="color: #4fd1c5; font-size: 0.9rem;"></i>
        <span>AI Assistant</span>
      </h2>
      
      <div class="text-white recipe-recommendations" style="font-size: 1.05rem; letter-spacing: 0.015rem; font-weight: 300; line-height: 1.6; font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;">
        <% 
          // Convert recommendation text to HTML with formatting
          let formattedText = positiveVibe;
          
          // Process the text to highlight recipe names based on available recommendations
          if (locals.recommendations && recommendations.length > 0) {
            const availableRecipes = recommendations.map(recipe => recipe.title);
            
            // Replace recipe names with links if they exist in recommendations
            availableRecipes.forEach(recipeName => {
              const recipeIndex = recommendations.findIndex(r => r.title === recipeName);
              if (recipeIndex >= 0) {
                const recipeRegex = new RegExp(recipeName, 'gi');
                formattedText = formattedText.replace(recipeRegex, `<a href="#recipe-${recipeIndex}" class="recipe-link">${recipeName}</a>`);
              }
            });
          }
          
          // Apply standard formatting for bold text
          formattedText = formattedText.replace(/\*\*([^*]+)\*\*/g, '<strong class="text-teal-300">$1</strong>');
          
          // Format numbered list items
          formattedText = formattedText.replace(/(\d+\.)\s([^:]+):/g, '<div class="mb-2 mt-3"><span class="text-teal-300 font-medium">$1</span> <span class="font-medium">$2</span>:</div>');
          
          // Convert newlines to HTML breaks
          formattedText = formattedText.split('\n').join('<br>');
          
          // Safety cleanup: remove any remaining markdown links or HTML to prevent rendering issues
          formattedText = formattedText.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '$1');
          formattedText = formattedText.replace(/<a\s+href=["'][^"']*["'][^>]*>(.*?)<\/a>/gi, '$1');
        %>
        <%- formattedText %>
      </div>
      
      <% if (locals.recommendations && recommendations.length > 0) { %>
        <div class="mt-4 pt-3" style="border-top: 1px solid rgba(79,209,197,0.3);">
          <p class="text-white font-medium mb-2">Available recipes in our database:</p>
          <ul style="color: white; list-style-type: none; padding-left: 0;">
            <% recommendations.slice(0, 5).forEach((recipe, index) => { %>
              <li class="mb-1" id="recipe-<%= index %>">
                <i class="fas fa-utensils me-2" style="color: #4fd1c5; font-size: 0.8rem;"></i>
                <a href="/recipes/<%= recipe.id %>?page=search<%= locals.about ? '&search=' + encodeURIComponent(locals.about) : '' %>" class="recipe-link"><%= recipe.title %></a>
                <% if (recipe.cuisine) { %><small class="text-muted">(<%= recipe.cuisine %>)</small><% } %>
              </li>
            <% }) %>
            <% if (recommendations.length > 5) { %>
              <li class="mt-2 text-white-50"><small>+ <%= recommendations.length - 5 %> more recipes available...</small></li>
            <% } %>
          </ul>
        </div>
      <% } %>
    </div>
  <% } %>
  
  <% if (locals.recommendations && recommendations.length > 0) { %>
    <h2 class="mb-4 text-center">Recipe Recommendations</h2>
    <div class="row">
      <% recommendations.forEach((recipe, index) => { %>
        <div class="col-md-6 mb-4">
          <div class="card shadow-sm position-relative">
            <button class="recipe-rating-btn" onclick="goToRatings('<%= recipe.id %>')" title="Rate this recipe">
              <i class="bi bi-star-fill"></i>
            </button>
            <div class="card-body">
              <h5 class="card-title text-primary"><%= recipe.title %></h5>
              <p class="card-text text-muted" style="font-size: 1em; line-height: 1.6; color: #333;"><%= recipe.description %></p>
              
              <!-- Small rating display -->
              <% if (recipe.average_rating && recipe.average_rating > 0) { %>
                <div class="rating-small mb-2" style="font-size: 0.75rem;">
                  <% 
                    const avgRating = parseFloat(recipe.average_rating);
                    const fullStars = Math.floor(avgRating);
                    const hasHalfStar = avgRating % 1 >= 0.5;
                    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
                  %>
                  <% for (let i = 0; i < fullStars; i++) { %>
                    <i class="bi bi-star-fill text-warning"></i>
                  <% } %>
                  <% if (hasHalfStar) { %>
                    <i class="bi bi-star-half text-warning"></i>
                  <% } %>
                  <% for (let i = 0; i < emptyStars; i++) { %>
                    <i class="bi bi-star text-muted"></i>
                  <% } %>
                  <span class="text-muted ms-1"><%= avgRating % 1 === 0 ? Math.round(avgRating) : avgRating.toFixed(1) %>/5</span>
                </div>
              <% } %>
              
              <p class="text-muted" style="margin-top: 10px;"><small><strong>Cuisine:</strong> <%= recipe.cuisine || 'Not specified' %></small></p>
              <a href="/recipes/<%= recipe.id %>?page=search<%= locals.about ? '&search=' + encodeURIComponent(locals.about) : '' %>" 
                 class="btn btn-outline-primary btn-sm recipe-link" 
                 data-recipe-url="/recipes/<%= recipe.id %>?page=search<%= locals.about ? '&search=' + encodeURIComponent(locals.about) : '' %>">
                View Recipe
              </a>
            </div>
          </div>
        </div>
      <% }) %>
    </div>
  <% } else if (locals.about) { %>
    <div class="alert alert-warning">
      No recipes match your preferences. Try adjusting your requirements.
    </div>
  <% } %>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.getElementById('searchForm');
      const loadingOverlay = document.createElement('div');
      loadingOverlay.className = 'loading-overlay';
      loadingOverlay.innerHTML = `
        <div class="loading-animation">
          <div class="spinner"></div>
          <p>AI is working its magic...</p>
        </div>
      `;
      document.body.appendChild(loadingOverlay);

      form.addEventListener('submit', function() {
        loadingOverlay.classList.add('active');
      });
      
      // Voice search functionality
      const voiceSearchBtn = document.getElementById('voiceSearchBtn');
      const searchInput = document.getElementById('about');
      const timerIndicator = document.getElementById('timerIndicator');
      let autoSubmitTimer = null;
      let secondsLeft = 5;
      
      // Function to clear the auto-submit timer
      const clearAutoSubmitTimer = () => {
        if (autoSubmitTimer) {
          clearInterval(autoSubmitTimer);
          autoSubmitTimer = null;
          timerIndicator.style.display = 'none';
          secondsLeft = 5;
        }
      };
      
      // Function to submit the form programmatically
      const submitSearchForm = () => {
        console.log("Auto-submitting form...");
        clearAutoSubmitTimer();
        loadingOverlay.classList.add('active'); // Show loading overlay
        
        // Use a small timeout to ensure the UI updates before submission
        setTimeout(() => {
          try {
            // Submit the form using click() on the submit button
            document.querySelector('#searchForm button[type="submit"]').click();
          } catch (err) {
            console.error("Error auto-submitting form:", err);
            
            // Fallback submission method
            try {
              form.submit();
            } catch (submitError) {
              console.error("Form submit error:", submitError);
              
              // Final fallback - navigate directly
              if (searchInput.value.trim() !== '') {
                window.location.href = `/recipes/search?about=${encodeURIComponent(searchInput.value)}`;
              }
            }
          }
        }, 100);
      };
      
      // Set up event listeners to cancel the timer on user interaction
      searchInput.addEventListener('input', clearAutoSubmitTimer);
      searchInput.addEventListener('click', clearAutoSubmitTimer);
      searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          clearAutoSubmitTimer();
        }
      });
      
      // Check if browser supports speech recognition
      if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        const recognition = new SpeechRecognition();
        
        recognition.continuous = false;
        recognition.interimResults = false;
        recognition.lang = 'en-US';
        
        // Initialize voice search button
        voiceSearchBtn.addEventListener('click', () => {
          if (voiceSearchBtn.classList.contains('listening')) {
            recognition.stop();
            clearAutoSubmitTimer();
          } else {
            searchInput.value = '';
            recognition.start();
            voiceSearchBtn.classList.add('listening');
            clearAutoSubmitTimer();
          }
        });
        
        // Process speech recognition results
        recognition.onresult = (event) => {
          const transcript = event.results[0][0].transcript;
          searchInput.value = transcript;
          
          // Focus input to allow user to edit if needed
          searchInput.focus();
          
          // Start the auto-submit timer
          secondsLeft = 5;
          timerIndicator.textContent = secondsLeft + 's';
          timerIndicator.style.display = 'inline';
          
          autoSubmitTimer = setInterval(() => {
            secondsLeft--;
            timerIndicator.textContent = secondsLeft + 's';
            
            if (secondsLeft <= 0) {
              submitSearchForm(); // Use our robust submission function
            }
          }, 1000);
        };
        
        // Handle recognition end
        recognition.onend = () => {
          voiceSearchBtn.classList.remove('listening');
        };
        
        // Handle errors
        recognition.onerror = (event) => {
          voiceSearchBtn.classList.remove('listening');
          clearAutoSubmitTimer();
          
          if (event.error === 'no-speech') {
            alert('No speech detected. Please try again.');
          } else if (event.error === 'not-allowed') {
            alert('Microphone permission denied. Please enable it to use voice search.');
          } else {
            console.error('Speech recognition error:', event.error);
          }
        };
      } else {
        // Hide button if speech recognition is not supported
        voiceSearchBtn.style.display = 'none';
        console.warn('Speech recognition not supported in this browser.');
      }
      
      // Handle recipe link preferences
      const openInNewTabCheckbox = document.getElementById('openInNewTab');
      const recipeLinks = document.querySelectorAll('.recipe-link');
      
      // Load saved preference
      const savedPreference = localStorage.getItem('openRecipesInNewTab');
      if (savedPreference !== null) {
        openInNewTabCheckbox.checked = savedPreference === 'true';
      }
      
      // Function to update recipe links based on preference
      function updateRecipeLinks() {
        const openInNewTab = openInNewTabCheckbox.checked;
        
        recipeLinks.forEach(link => {
          if (openInNewTab) {
            link.setAttribute('target', '_blank');
            link.setAttribute('rel', 'noopener noreferrer');
          } else {
            link.removeAttribute('target');
            link.removeAttribute('rel');
          }
        });
        
        // Save preference
        localStorage.setItem('openRecipesInNewTab', openInNewTab.toString());
      }
      
      // Set initial state
      updateRecipeLinks();
      
      // Update when preference changes
      openInNewTabCheckbox.addEventListener('change', updateRecipeLinks);
    });
    
    // Function to navigate to recipe ratings section
    function goToRatings(recipeId) {
      // Open the recipe page and scroll to ratings section
      const url = `/recipes/${recipeId}?page=search#ratings-section`;
      window.open(url, '_blank');
    }
</script>

<%- include('partials/footer') %>